{"version":3,"file":"static/js/186.093dcff7.chunk.js","mappings":"0OA6EA,UAnEA,WACI,IAAAA,GAA8BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAC1BI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAA0BT,EAAAA,EAAAA,UAAS,IAAGU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA/BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAEhBG,GAAWC,EAAAA,EAAAA,MAAXD,QAuBN,OArBAE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACK,OAAnBnB,GAAa,GAAMiB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGWC,EAAAA,GAAAA,aAAiBf,GAAS,KAAD,EAAAS,EAAAG,EAAAI,KAA3CN,EAAOD,EAAPC,QACRnB,EAAWmB,GAASE,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAK,GAAAL,EAAA,SAEpBM,QAAQpB,MAAM,sWAAwEc,EAAAK,IACtFlB,EAASa,EAAAK,GAAME,SAAS,QAEJ,OAFIP,EAAAC,KAAA,GAExBlB,GAAa,GAAOiB,EAAAQ,OAAA,6BAAAR,EAAAS,OAAA,GAAAb,EAAA,wBAE3B,kBAZc,OAAAJ,EAAAkB,MAAA,KAAAC,UAAA,KAafpB,GAEJ,GAAG,CAACH,KAMAwB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACKnC,EAAQoC,OAAS,GACdC,EAAAA,EAAAA,KAAA,MAAAF,SACMnC,EAAQsC,KAAI,SAAAC,GAA8B,IAA3BC,EAAED,EAAFC,GAAIC,EAAMF,EAANE,OAAQC,EAAOH,EAAPG,QACzB,OACIL,EAAAA,EAAAA,KAAA,MAAAF,UACID,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIE,EAAAA,EAAAA,KAAA,KAAAF,SAAIM,KACJJ,EAAAA,EAAAA,KAAA,KAAAF,SAAIO,QAHHF,EAOjB,OAGJH,EAAAA,EAAAA,KAAA,KAAAF,SAAG,2SAGN/B,IAAaiC,EAAAA,EAAAA,KAACM,EAAAA,EAAa,IAE3BnC,IACG6B,EAAAA,EAAAA,KAACO,EAAAA,EAAO,CAAAT,UACJE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,4QAOxB,C","sources":["components/Reviews/Reviews.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport { LoaderSpinner } from \"components/Loader/Loader\";\nimport Message from 'components/Message/Message';\n\nimport api from \"services/api\";\n\n\n\nfunction Reviews () {\n    const [reviews, setReviews] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState('');\n\n    const{movieId} = useParams();\n\n    useEffect(()=>{\n        const fetchData = async () => {\n            setIsLoading(true);\n    \n            try {\n                const { results } = await api.fetchReviews(movieId);\n                setReviews(results);\n              } catch (error) {\n                console.error('Щось відбулося не так із запитом до відеотеки. подробиці помилки тут :', error);\n                setError(error.message);\n              } finally {\n                setIsLoading(false);\n              }\n        };\n        fetchData();\n\n    }, [movieId])\n\n\n\n\n    return (\n        <div>\n            {reviews.length > 0 ? (\n                <ul>\n                    { reviews.map(({ id, author, content }) => {\n                        return (\n                            <li key={id}>\n                                <div>\n                                    <p>{author}</p>\n                                    <b>{content}</b>\n                                </div>\n                            </li>\n                        )\n                    })}\n                </ul>\n            ) : (\n                <p> У нас немає рецензій на цей фільм, тож, довіртеся інтуіції</p>\n            )}\n\n            {isLoading && <LoaderSpinner />}\n\n            {error && (\n                <Message>\n                    <h2>\n                        Сервіс пішов попоїсти. Можливо скоро повернеться. \n                    </h2>\n                </Message>\n            )}\n        </div>\n    )\n}\n\nReviews.propTypes = {\n    movieId: PropTypes.object,\n    author: PropTypes.string,\n    content: PropTypes.string,\n\n}\n\nexport default Reviews;"],"names":["_useState","useState","_useState2","_slicedToArray","reviews","setReviews","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","movieId","useParams","useEffect","fetchData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$api$fetchRevie","results","wrap","_context","prev","next","api","sent","t0","console","message","finish","stop","apply","arguments","_jsxs","children","length","_jsx","map","_ref2","id","author","content","LoaderSpinner","Message"],"sourceRoot":""}